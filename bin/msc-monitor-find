#!/bin/bash
set -eu # Exit when returns non-zero, Error when variable is unset.
### NAME
###     msc-monitor-find - Find the xrandr infomation, such as EDID
###
### SYNOPSIS
###     msc-monitor-find [options] -D [Descriptor]
###
### DESCRIPTION
###     This program finds EDID descriptor of active monitors looking from:
###
###         Non-empty edid file within /sys/class/drm/ or xrandr
###
### REQUIREMENTS
###     monitor-edid needs to be installed.
###     For RHEL and Fedora, monitor-edid is provided by xorg-x11-utils
###
### EXAMPLES
###     To list the Manufacturer of each monitor, run:
###
###         msc-monitor-find -D Manufacturer
###
###     To find the connector that associated with monitor whose
###      manufacturer that start with AX:
###
###         msc-monitor-find -V 'Manufacturer=AX*' -o
###
### AUTHOR
###     Ding-Yi Chen (definite), dchen@redhat.com
###     Created in 2020-03-21 15:15:11
###
MSC_LOG_PREFIX="[msc-monitor-find]"
trap msc_exit_print_error EXIT

## Setup my-cfg-sys environment
eval "$($(dirname $(realpath ${BASH_SOURCE[0]}))/msc-env-find -f)"

##== Functions
declare -A EdidDrmMap
declare -A EdidXrandrMap
declare -A EdidXrandrPropMap
declare -A EdidDescriptorMap

BytePerLine=16

extract_drm_edid() {
  for f in /sys/class/drm/card*-*/edid; do
    local edidLine=$(xxd -p -c $BytePerLine $f | tr -d '[:space:]')
    if [ -z "$edidLine" ]; then
      continue
    fi
    local connector=$(sed -e "s|^.*\(card[0-9a-zA-Z-]*\)/.*$|\1|" <<<$f)
    EdidDrmMap["$edidLine"]=$connector
  done
}

## Note: xrandr does not work without X
extract_xrandr_active_monitors() {
  xrandr --listactivemonitors | sed -rne '/[0-9]+:/ s/.*\s+([a-zA-Z0-9-]*)$/\1/p'
}

extract_xrandr_edid() {
  local xrandrPropAll=$(xrandr --prop 2>/dev/null)
  if [ -z "$xrandrPropAll" ]; then
    return $MSC_EXIT_RETURN_FALSE
  fi
  local outputs=$(extract_xrandr_active_monitors)
  if [ -z "$outputs" ]; then
    exit $MSC_EXIT_RETURN_FALSE
  fi

  local xrandrProp
  local edidLine
  for out in $outputs; do
    xrandrProp=$(msc_extract_section "^$out " <<<"$xrandrPropAll" | tail -n +2)
    edidLine=$(msc_extract_section -1 -c "^[[:blank:]]*[0-9a-f]+" "^[[:blank:]]*EDID:" <<<"$xrandrProp"|
      sed -rne '/^[[:blank:]]*[0-9a-f]+/p' |
      tr -d '[:space:]')
    EdidXrandrMap["$edidLine"]=$out
    EdidXrandrPropMap["$edidLine"]="$xrandrProp"
  done
}

decode_edid() {
  xxd -r -p <<<"$1" | monitor-parse-edid
}

## extract_edid_descriptor <descriptor> "decoded txt"
##     Retrieve the value of the field.
extract_edid_descriptor() {
  local descriptor="$1"
  local edidTxt="$2"
  msc_extract_section "^$descriptor:" <<<"$edidTxt" | sed -e "s/^$descriptor: //"
}

## Make session for multi-lines display
print_section_header() {
  if [ -n "$FilterConnector" -o -n "$FilterOutput" ]; then
    return
  fi
  if [ ${#EdidDrmMap[@]} -gt 1 ]; then
    if [ $ResultCount -gt 1 ]; then
      ## Print empty as section separator
      echo
    fi
    echo "### $connector"
  fi
}

##== Parsing
declare -A MODE
MODE[DEFAULT]=0
MODE[EDID]=1
MODE[CONNECTOR]=2
MODE[DESCRIPTOR]=3
MODE[XRANDR_OUTPUT]=5
MODE[PREFERRED_MODELINE]=6
DisplayMode=${MODE[DEFAULT]}
FilterConnector=
FilterDescriptor=
FilterDescriptorValuePattern=
FilterOutput=
SessionType=
FilterXpts=0
FilterYpts=0
###
### OPTIONS
while getopts 'hC:cD:elO:opV:' opt; do
  case $opt in
    h)
      ###     -h: Print usage
      msc_help_print $0
      exit $MSC_EXIT_OK
      ;;
    C)
      ###     -C <connector>: Filter DRM connector. e.g. card0-DP-3
      FilterConnector=$OPTARG
      ;;
    c)
      ###     -c: Show DRM connector
      DisplayMode=${MODE[CONNECTOR]}
      ;;
    D)
      ###     -D <descriptor>: Filter descriptor. e.g. Manufacturer
      FilterDescriptor="$OPTARG"
      DisplayMode=${MODE[DESCRIPTOR]}
      ;;
    e)
      ###     -e: Dump EDID hexstring
      DisplayMode=${MODE[EDID]}
      ;;
    O)
      ###     -O [output]: Filter output (e.g. eDP-1, DP-2-1)
      FilterOutput=$OPTARG
      ;;
    o)
      ###     -o: Show XRandr Output
      DisplayMode=${MODE[XRANDR_OUTPUT]}
      ;;
    p)
      ###     -o: Show preferred modeline
      DisplayMode=${MODE[PREFERRED_MODELINE]}
      ;;
    V)
      ###     -V <descriptor=pattern>:
      ###         Value of descriptor should match this glob pattern.
      FilterDescriptor=${OPTARG%%=*}
      FilterDescriptorValuePattern=${OPTARG#*=}
      ;;
    x)
      ###     -x
      ###         Show width (pts)
      DisplayMode=${MODE[X_PTR]}
      ;;
  esac
done
shift $((OPTIND - 1))

##== Main Start ==
extract_drm_edid

case $XDG_SESSION_TYPE in
  x11)
    extract_xrandr_edid
    SessionType=x11
    ;;
  wayland)
    SessionType=wayland
    ;;
  *)
    ## Not in GUI, or unknown
    SessionType=ignore
    ;;
esac

ResultCount=0

for edidLine in "${!EdidDrmMap[@]}"; do
  ## Filter out the irrevelent results
  connector="${EdidDrmMap[$edidLine]}"
  if [ -n "$FilterConnector" -a "$FilterConnector" != $connector ]; then
    continue
  fi

  if [ $SessionType = x11 ]; then
    output=${EdidXrandrMap[$edidLine]}
    if [ -n "$FilterOutput" -a "$FilterOutput" != "$output" ]; then
      continue
    fi
  fi

  edidTxt=$(decode_edid "$edidLine")

  if [ -n "$FilterDescriptorValuePattern" ]; then
    DescriptorValue=$(extract_edid_descriptor "$FilterDescriptor" "$edidTxt")
    if [[ ! "$DescriptorValue" == $FilterDescriptorValuePattern ]]; then
      continue
    fi
  fi

  ## Start displaying revelent result
  : $((ResultCount++))
  case $DisplayMode in
    ${MODE[CONNECTOR]})
      echo $connector
      ;;

    ${MODE[DESCRIPTOR]})
      extracted=$(extract_edid_descriptor "$FilterDescriptor" "$edidTxt")

      if [[ "$extracted" =~ $FilterDescriptorValuePattern ]]; then
        print_section_header
        echo "$extracted"
      fi
      ;;

    ${MODE[EDID]})
      print_section_header
      fold -w 32 <<<"$edidLine"
      ;;

    ${MODE[XRANDR_OUTPUT]})
      if [ $SessionType = x11 ]; then
        echo $output
      else
        msc_fail "Section Type $SessionType does not support XRandr" $MSC_EXIT_CRIT
      fi
      ;;

    ${MODE[PREFERRED_MODELINE]})
      print_section_header
      sed -ne '/Monitor preferred modeline/ {n;s/^\s*//p}' <<<"$edidTxt"
      ;;

    *)
      print_section_header
      echo "$edidTxt"
      echo "${EdidXrandrPropMap[$edidLine]}"
      ;;

    esac
done

if [[ $ResultCount -lt 1 ]]; then
    exit $MSC_EXIT_RETURN_FALSE
fi
exit $MSC_EXIT_OK

## vim:et:ts=4:sw=4:si
